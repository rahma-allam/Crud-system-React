{"version":3,"sources":["components/CourseForm.js","components/CourseList.js","App.js","reportWebVitals.js","index.js"],"names":["CourseForm","props","onSubmit","addCourse","type","id","value","current","onChange","updatCourse","CourseList","state","isEdit","renderCourse","details","name","onClick","toggleState","deletCourse","index","updateCourseItem","e","preventDefault","editCourse","input","editForm","ref","v","defaultValue","setState","this","Component","App","courses","target","push","splice","course","console","log","courseList","map","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAYeA,EAXI,SAACC,GAChB,OACI,8BACE,uBAAMC,SAAUD,EAAME,UAAtB,UACE,uBAAOC,KAAK,OAAOC,GAAG,OAAOC,MAAOL,EAAMM,QAASC,SAAUP,EAAMQ,cACnE,wBAAQL,KAAK,SAAb,8BCiDGM,E,4MAlDZC,MAAQ,CACLC,QAAS,G,EAGZC,aAAe,WACd,OACD,+BACA,+BAAO,EAAKZ,MAAMa,QAAQC,OAC1B,wBAAQC,QAAW,kBAAK,EAAKC,eAA7B,yBACA,wBAAQD,QAAW,kBAAM,EAAKf,MAAMiB,YAAY,EAAKjB,MAAMkB,QAA3D,iC,EAMHC,iBAAiB,SAACC,GACfA,EAAEC,iBACL,EAAKrB,MAAMsB,WAAW,EAAKtB,MAAMkB,MAAO,EAAKK,MAAMlB,OACnD,EAAKW,e,EAGJQ,SAAW,WACR,OACG,uBAAOvB,SAAU,EAAKkB,iBAAtB,UACG,uBAAOhB,KAAK,OAAOsB,IAAK,SAACC,GAAD,OAAM,EAAKH,MAAQG,GAAIC,aAAc,EAAK3B,MAAMa,QAAQC,OAChF,uD,EAOTE,YAAc,WACf,IAAKL,EAAQ,EAAKD,MAAbC,OACL,EAAKiB,SAAS,CACXjB,QAAWA,K,4CAKX,WACD,OAEC,cAAC,WAAD,UACIkB,KAAKnB,MAAMC,OAAUkB,KAAKL,WAAaK,KAAKjB,qB,GAhD1BkB,aCwFVC,E,4MAnFbrB,MAAQ,CACNsB,QAAU,CACR,CAAClB,KAAO,QACR,CAACA,KAAO,OACR,CAACA,KAAO,WAEVR,QAAS,I,EAIXE,YAAc,SAACY,GACb,EAAKQ,SAAS,CAACtB,QAAUc,EAAEa,OAAO5B,S,EAIpCH,UAAY,SAACkB,GAET,GADAA,EAAEC,iBAC0B,KAAxBD,EAAEa,OAAOnB,KAAKT,MAEd,OAAS,EAGX,IAAKC,EAAU,EAAKI,MAAfJ,QACA0B,EAAW,EAAKtB,MAAhBsB,QACLA,EAAQE,KAAK,CAACpB,KAAMR,IACpB,EAAKsB,SAAS,CACZI,UACA1B,QAAS,M,EAQjBW,YAAa,SAACC,GACZ,IAAIc,EAAU,EAAKtB,MAAMsB,QACzBA,EAAQG,OAAOjB,EAAM,GACrB,EAAKU,SAAS,CACZI,a,EAIJV,WAAa,SAACJ,EAAMb,GAChB,IAAK2B,EAAW,EAAKtB,MAAhBsB,QACDI,EAASJ,EAAQd,GACrBkB,EAAM,KAAW/B,EACjBgC,QAAQC,IAAKF,GACb,EAAKR,SAAS,CACZI,a,4CAQP,WAAS,IAAD,OAEAO,EADWV,KAAKnB,MAAfsB,QACoBQ,KAAK,SAACJ,EAASlB,GAEzC,OACI,cAAC,EAAD,CAAYL,QAAUuB,EAAqBlB,MAAOA,EAAQD,YAAa,EAAKA,YAAaT,YAAa,EAAKA,YAC3Gc,WAAY,EAAKA,YADmBJ,MAO1C,OACE,0BAASuB,UAAU,MAAnB,UACE,4CACA,cAAC,EAAD,CAAYnC,QAASuB,KAAKnB,MAAMJ,QAChCE,YAAaqB,KAAKrB,YAClBN,UAAW2B,KAAK3B,YAEhB,mCAAMqC,EAAN,c,GA/EYT,aCSHY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6856d8fe.chunk.js","sourcesContent":["import React from 'react';\r\nconst CourseForm = (props)=> {\r\n    return(\r\n        <div> \r\n          <form onSubmit={props.addCourse}>\r\n            <input type=\"text\" id='name' value={props.current} onChange={props.updatCourse}/>\r\n            <button type=\"submit\">Add Course</button>  \r\n         </form>  \r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default CourseForm ;","import React, { Component, Fragment } from 'react';\r\nclass CourseList extends Component {\r\n \r\n\r\n\r\n   state = {\r\n      isEdit : false\r\n   }\r\n // render course list\r\n   renderCourse = ()=> {\r\n    return(\r\n   <li>\r\n   <span>{this.props.details.name}</span>\r\n   <button onClick = {()=> this.toggleState()}>Edit Course</button>\r\n   <button onClick = {() => this.props.deletCourse(this.props.index)}> Delete Course </button>\r\n   </li>\r\n    )\r\n }\r\n\r\n// update cource \r\nupdateCourseItem=(e)=>{\r\n   e.preventDefault()\r\nthis.props.editCourse(this.props.index ,this.input.value )\r\nthis.toggleState();\r\n}\r\n // edit form \r\n editForm = () => {\r\n    return(\r\n       <form  onSubmit={this.updateCourseItem} >\r\n          <input type=\"text\" ref={(v)=> this.input = v}  defaultValue={this.props.details.name}/>\r\n          <button >Update Course</button>\r\n       </form>\r\n    )\r\n }\r\n\r\n\r\n // toggle stat\r\n toggleState = () => {\r\nlet {isEdit}=this.state;\r\nthis.setState({\r\n   isEdit : ! isEdit\r\n})\r\n }\r\n \r\n \r\n   render(){\r\n  return (\r\n      \r\n   <Fragment>\r\n     { this.state.isEdit ?  this.editForm() : this.renderCourse()  }\r\n   </Fragment>\r\n  );\r\n }\r\n}\r\n\r\nexport default CourseList;\r\n","import React, { Component } from 'react';\nimport CourseForm from './components/CourseForm';\nimport CourseList from './components/CourseList';\nclass App extends Component {\n\n\n  state = {\n    courses : [\n      {name : 'HTML'},\n      {name : 'CSS'},\n      {name : 'jQuery'},\n    ], \n    current: ''\n  }  \n  \n  // update course\n  updatCourse = (e)=>{\n    this.setState({current : e.target.value})\n  }\n\n  // add course \n  addCourse = (e)=> {\n      e.preventDefault();\n      if( e.target.name.value === '' )\n      {\n          return   false\n     }\n      else {\n        let {current}= this.state;\n        let {courses} = this.state;\n        courses.push({name: current});\n        this.setState({\n          courses,\n          current: ''\n        })\n     \n      }\n  }\n\n  // delete course\n\n  deletCourse= (index) =>{\n    let courses = this.state.courses;\n    courses.splice(index,1);\n    this.setState({\n      courses\n    })\n  }\n  //edit course \n  editCourse = (index,value)=>{\n      let {courses} = this.state;\n      let course = courses[index];\n      course['name'] = value;\n      console.log (course)\n      this.setState({\n        courses \n      })\n  }\n\n\n\n\n\n render(){\n   const {courses}= this.state;\n   const courseList = courses.map( (course , index) =>{\n  \n    return (\n        <CourseList details ={course}  key={index} index={index}  deletCourse={this.deletCourse} updatCourse={this.updatCourse}\n        editCourse={this.editCourse}/>\n      )\n   }  \n   )\n   \n\n  return (\n    <section className=\"App\">\n      <h2>Add Course</h2>\n      <CourseForm current={this.state.current} \n      updatCourse={this.updatCourse} \n      addCourse={this.addCourse}\n      />\n      <ul> {courseList} </ul>      \n     \n    </section>\n  );\n }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}